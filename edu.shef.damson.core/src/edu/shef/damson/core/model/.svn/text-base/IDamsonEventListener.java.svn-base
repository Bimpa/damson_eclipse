/******************************************************************************************
 * Copyright (c) 2011, University of Sheffield
 * 
 * The source code for the DAMSON Debugger is available for non commercial use.
 * The code is based up that of Bjorn Freeman-Benson and IBM Corporation which is 
 * described at 
 * 
 * http://www.eclipse.org/articles/Article-Debugger/how-to.html
 * 
 * and is distributed under the Eclipse Public License v1.0
 * 
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Paul Richmond (http://www.paulrichmond.staff.shef.ac.uk/) - DAMSON debugger
 *     IBM Corporation and Bjorn Freeman-Benson - initial code developed for a PDA debugger
 ******************************************************************************************/
package edu.shef.damson.core.model;

/**
 * Listeners are notified of events occurring in a the DAMSON debugger.
 * <p>
 * The events generated by the DAMSON debugger are:
 * <ul>
 * 
 * <li><code>started</code> - the debugger has started (guaranteed to be the
 * 		first event sent)
 * </li>
 * 
 * <li><code>terminated</code> - the debugger has terminated (guaranteed to be
 * 		the last event sent)
 * </li>
 * 
 * <li><code>suspended X</code> - the debugger has suspended and entered debug mode;
 * 		<code>X</code> is the cause of the suspension:
 * 		<ul>
 * 		<li><code>breakpoint N</code> - a breakpoint at line <code>N</code> was hit</li>
 * 		<li><code>client</code> - a client request to suspend has completed</li>
 * 		<li><code>step</code> - a step request has completed</li>
 * 		</ul>
 * </li>
 * 
 * <li><code>resumed X</code> - the debugger has resumed execution in run mode;
 * 		<code>X</code> is the cause of the resume:
 * 		<ul>
 * 		<li><code>step</code> - a step request has been initiated</li>
 * 		<li><code>client</code> - a client request to resume has been initiated</li>
 * 		</ul>
 * </li>
 * 
 * </ul>
 * </p>
 */
public interface IDamsonEventListener {
	
	/**
	 * Notification the given event occurred in the target program
	 * being interpreted.
	 * 
	 * @param event the event
	 */
	public void handleEvent(String event);

}
